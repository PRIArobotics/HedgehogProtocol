syntax = "proto3";

package hedgehog.protocol.proto;

enum MotorState {
    // The motor receives constant power
    // set amount to 0 (or skip it) to turn the motor off
    POWER = 0;
    // The motor is controlled to have a constant velocity
    // set amount to 0 (or skip it) to do active braking
    VELOCITY = 1;
    // The motor is freezed by connecting its two connectors
    // The amount field is ignored
    FREEZE = 2;
}

// Set one or more actions for motors
message MotorAction {
    message Action {
        // the state to set
        MotorState state = 1;
        // the amount (power, velocity) to set for the action
        sint32 amount = 2;
        // set one of these to run the action until a goal position is reached
        oneof position {
            sint32 relative = 3;
            sint32 absolute = 4;
        }
        // if a goal position was given, upon reaching the position,
        // the motor will go into this state (with amount = 0 if relevant), i.e.:
        // POWER: turn off
        // VELOCITY: brake
        // FREEZE: freeze
        MotorState reached_state = 5;
    }

    map<uint32, Action> motors = 1;
}

// Request for one or more motor states
message MotorRequest {
    repeated uint32 motors = 1;
}

// Update of one or more motor states
// Only velocity and position can change on their own
// If the current command is a position command, the state can change as well;
// that change is signaled by MotorStateUpdate
message MotorUpdate {
    message Update {
        sint32 velocity = 1;
        sint32 position = 2;
    }

    map<uint32, Update> motors = 1;
}

// Update of one or more motor states
// This update is only triggered when a motor's command had a goal position
// and that position was reached.
message MotorStateUpdate {
    map<uint32, MotorState> motors = 1;
}

// Set one or more motors' position counters
message MotorSetPositionAction {
    map<uint32, sint32> motors = 1;
}
