ack.Acknowledgement acknowledgement = 1 {
  """Reply messages for actions that have no response data. Code `OK` means a positive acknowledgement, other codes
negative acknowledgements. A negative acknowledgement may be sent as the reply to any message, even if another reply
is expected. Negative acknowledgements may have a `message` describing the error condition."""

  AcknowledgementCode code = 1 {
    Python: "int", "OK";
    TypeScript: "number", "AcknowledgementCode.OK";
  }
  string message = 2 {
    Python: "str", "''";
    TypeScript: "string", "''";
  }

  <= ack.Acknowledgement(code, [message])
    """ack""";
}

io.IOAction io_action = 2 {
  """Changes the configuration of one IO port"""

  uint32 port = 1 {
    Python: "int";
    TypeScript: "number";
  }
  IOFlags flags = 2 {
    Python: "int";
    TypeScript: "number";
  }

  => io.Action(port, flags)
    """IO action => ack""";
}

io.IOCommandMessage io_command_message = 16 {
  """Request or reply for one IO port's current command. The command may change by an IO action."""

  uint32 port = 1 {
    Python: "int";
    TypeScript: "number";
  }
  IOFlags flags = 2 {
    Python: "int";
    TypeScript: "number";
  }
  nested Subscription subscription = 3 {
    Python: "Subscription";
    TypeScript: "Subscription";
  }

  => io.CommandRequest(port)
    """IO command request => IO command reply""";
  <= io.CommandReply(port, flags)
    """IO command reply""";
  => io.CommandSubscribe(port, subscription)
    """IO command subscribe => ack""";
  <- io.CommandUpdate(port, flags, subscription)
    """IO command update""";
}

io.AnalogMessage analog_message = 3 {
  """Request or reply for one analog sensor's value"""

  uint32 port = 1 {
    Python: "int";
    TypeScript: "number";
  }
  uint32 value = 2 {
    Python: "int";
    TypeScript: "number";
  }
  nested Subscription subscription = 3 {
    Python: "Subscription";
    TypeScript: "Subscription";
  }

  => analog.Request(port)
    """analog request => analog reply""";
  <= analog.Reply(port, value)
    """analog reply""";
  => analog.Subscribe(port, subscription)
    """analog subscribe => ack""";
  <- analog.Update(port, value, subscription)
    """analog update""";
}

io.DigitalMessage digital_message = 4 {
  """Request or reply for one digital sensor's value"""

  uint32 port = 1 {
    Python: "int";
    TypeScript: "number";
  }
  bool value = 2 {
    Python: "bool";
    TypeScript: "boolean";
  }
  nested Subscription subscription = 3 {
    Python: "Subscription";
    TypeScript: "Subscription";
  }

  => digital.Request(port)
    """digital request => digital reply""";
  <= digital.Reply(port, value)
    """digital reply""";
  => digital.Subscribe(port, subscription)
    """digital subscribe => ack""";
  <- digital.Update(port, value, subscription)
    """digital update""";
}

motor.MotorAction motor_action = 5 {
  """Command for one motor. By setting a relative or absolute goal position,
the motor will go into `reached_state` upon reaching the position."""

  uint32 port = 1 {
    Python: "int";
    TypeScript: "number";
  }
  MotorState state = 2 {
    Python: "int";
    TypeScript: "number";
  }
  sint32 amount = 3 {
    Python: "int", "0";
    TypeScript: "number", "0";
  }
  MotorState reached_state = 4 {
    Python: "int", "POWER";
    TypeScript: "number", "MotorState.POWER";
  }
  oneof position {
    sint32 relative = 5 {
      Python: "int";
      TypeScript: "number";
    }
    sint32 absolute = 6 {
      Python: "int";
      TypeScript: "number";
    }
  }

  => motor.Action(port, state, amount, [reached_state, relative/absolute])
    """motor action => ack""";
}

motor.MotorCommandMessage motor_command_message = 17 {
  """Request or reply for one motor's current command.
The command may change by a motor action, or by reaching the goal position of a terminating motor action."""

  uint32 port = 1 {
    Python: "int";
    TypeScript: "number";
  }
  MotorState state = 2 {
    Python: "int";
    TypeScript: "number";
  }
  sint32 amount = 3 {
    Python: "int";
    TypeScript: "number";
  }
  nested Subscription subscription = 4 {
    Python: "Subscription";
    TypeScript: "Subscription";
  }

  => motor.CommandRequest(port)
    """motor command request => motor command reply""";
  <= motor.CommandReply(port, state, amount)
    """motor command reply""";
  => motor.CommandSubscribe(port, subscription)
    """motor command subscribe => ack""";
  <- motor.CommandUpdate(port, state, amount, subscription)
    """motor command update""";
}

motor.MotorStateMessage motor_state_message = 6 {
  """Request or reply for one motor's state. The motor state may generally change at any time,
but returned values are approximations, and motor state requests may not be supported at all."""

  uint32 port = 1 {
    Python: "int";
    TypeScript: "number";
  }
  sint32 velocity = 2 {
    Python: "int";
    TypeScript: "number";
  }
  sint32 position = 3 {
    Python: "int";
    TypeScript: "number";
  }
  nested Subscription subscription = 4 {
    Python: "Subscription";
    TypeScript: "Subscription";
  }

  => motor.StateRequest(port)
    """motor state request => motor state reply""";
  <= motor.StateReply(port, velocity, position)
    """motor state reply""";
  => motor.StateSubscribe(port, subscription)
    """motor state subscribe => ack""";
  <- motor.StateUpdate(port, velocity, position, subscription)
    """motor state update""";
}

motor.MotorSetPositionAction motor_set_position_action = 18 {
  """Set one motor's position counter."""

  uint32 port = 1 {
    Python: "int";
    TypeScript: "number";
  }
  sint32 position = 2 {
    Python: "int";
    TypeScript: "number";
  }

  => motor.SetPositionAction(port, position)
    """set motor position action => ack""";
}

servo.ServoAction servo_action = 7 {
  """Set one servo target position"""

  uint32 port = 1 {
    Python: "int";
    TypeScript: "number";
  }
  bool active = 2 {
    Python: "bool";
    TypeScript: "boolean";
  }
  uint32 position = 3 {
    Python: "int", "None";
    TypeScript: "number", "undefined";
  }

  => servo.Action(port, active, position)
    """servo action => ack""";
}

servo.ServoCommandMessage servo_command_message = 19 {
  """Request or reply for one servo's current command. The command may change by a servo action,
actual servo movement is not reflected."""

  uint32 port = 1 {
    Python: "int";
    TypeScript: "number";
  }
  bool active = 2 {
    Python: "bool";
    TypeScript: "boolean";
  }
  uint32 position = 3 {
    Python: "int";
    TypeScript: "number";
  }
  nested Subscription subscription = 4 {
    Python: "Subscription";
    TypeScript: "Subscription";
  }

  => servo.CommandRequest(port)
    """servo command request => servo command reply""";
  <= servo.CommandReply(port, active, position)
    """servo command reply""";
  => servo.CommandSubscribe(port, subscription)
    """servo command subscribe => ack""";
  <- servo.CommandUpdate(port, active, position, subscription)
    """servo command update""";
}

process.ProcessExecuteAction process_execute_action = 20 {
  """Invoke a process on the controller"""

  repeated string args = 2 {
    Python: "str";
    TypeScript: "string[]";
  }
  string working_dir = 1 {
    Python: "str", "None";
    TypeScript: "string", "undefined";
  }

  => process.ExecuteAction(*args, [working_dir])
    """process execute action => process execute reply""";
}

process.ProcessExecuteReply process_execute_reply = 21 {
  """Reply with the process' PID for communication purposes"""

  uint32 pid = 1 {
    Python: "int";
    TypeScript: "number";
  }

  <= process.ExecuteReply(pid)
    """process execute reply""";
}

process.ProcessStreamMessage process_stream_message = 8 {
  """send data to/receive data from a process' file streams"""

  uint32 pid = 1 {
    Python: "int";
    TypeScript: "number";
  }
  ProcessFileno fileno = 2 {
    Python: "int";
    TypeScript: "number";
  }
  bytes chunk = 3 {
    Python: "bytes", "b''";
    TypeScript: "Uint8Array", "undefined";
  }

  => process.StreamAction(pid, fileno, chunk)
    """stream data action => ack""";
  <- process.StreamUpdate(pid, fileno, chunk)
    """stream data update""";
}

process.ProcessSignalAction process_signal_action = 22 {
  """Send signal to a process"""

  uint32 pid = 1 {
    Python: "int";
    TypeScript: "number";
  }
  uint32 signal = 2 {
    Python: "int";
    TypeScript: "number";
  }

  => process.SignalAction(pid, signal)
    """process signal action => ack""";
}

process.ProcessExitUpdate process_exit_update = 23 {
  """Signals that the process has exited"""

  uint32 pid = 1 {
    Python: "int";
    TypeScript: "number";
  }
  int32 exit_code = 2 {
    Python: "int";
    TypeScript: "number";
  }

  <- process.ExitUpdate(pid, exit_code)
    """process exit update""";
}
