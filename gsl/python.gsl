.template 0
 ignorecase = 0
 pkg_name = "$(name)_pb2"

 for message
   message.full_name = "$(pkg_name).$(name)"
   for usage
     usage.Msg = complex ?? "protobuf" ? string.replace(type, "req|RequestMsg,rep|ReplyMsg,upd|ReplyMsg")
     usage.Superclass = complex ?? "Message" ? "SimpleMessage"

-    # copy fields from message to usage
     for field as f
       for message.field where name="$(f)"
         copy field to usage
         delete f
       else
         abort "ERROR: $(class_name) requires nonexistent field $(name).$(f)"
       endfor
     else
       for message.field
         copy field to usage
       endfor
     endfor
   endfor
   for parser
     parser.Msg = string.replace(dir, "req|RequestMsg,rep|ReplyMsg")
     parser.name = "_parse_$(id)_$(string.replace(dir, "req|request,rep|reply"))"

-    # copy usages from message to parser
     for usage as u
       for message.usage where class_name="$(u)"
         copy usage to parser
         delete u
       else
         abort "ERROR: $(name) requires nonexistent class $(package.name).$(u)"
       endfor
     else
       for message.field
         copy field to usage
       endfor
     endfor
   endfor
 endfor
.endtemplate
.template 1
from typing import Union

from . import RequestMsg, ReplyMsg, Message, SimpleMessage
from hedgehog.protocol.proto import $(pkg_name)
from hedgehog.utils import protobuf
.for message
.  for usage


.    gsl from "gsl/python_class"
.  endfor
.  for parser


.    gsl from "gsl/python_parser"
.  endfor
.endfor
.endtemplate
