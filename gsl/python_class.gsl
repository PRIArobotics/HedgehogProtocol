.template 0
 ignorecase = 0

 function fields_list
   if count(field) = count(message.field)
     return ""
   else
     result = ""
     for field
       result += "'$(name)'$(!last() ?? ", " ? (first() ?? "," ? ""))"
     endfor
     return ", fields=($(result))"
   endif
 endfunction

 function init_param_list
   result = "self"
   for field
     result += ", $(name): $(->python.type)"
   endfor
   return result
 endfunction

 macro parse_field
.  if defined(kind) & kind = "nested"
        $(name) = msg.$(name) if msg.HasField('$(name)') else None
.  elsif defined(kind) & kind = "oneof"
        $(name) = msg.$(name) if msg.HasField('$(name)') else None
.  else
        $(name) = msg.$(name)
.  endif
.endmacro

 function msg_param_list
   result = ""
   for field
     result += "$(name)$(last() ?? "" ? ", ")"
   endfor
   return result
 endfunction

 macro serialize_field
.  if (kind ? "") = "nested"
        msg.$(name).CopyFrom(self.$(name))
.  elsif (kind ? "") = "oneof"
        if self.$(name) is not None:
            msg.$(name) = self.$(name)
.  else
        msg.$(name) = self.$(name)
.  endif
.endmacro

.endtemplate
.template 1
@$(Msg).message($(full_name), '$(oneof_name)'$(fields_list()))
class $(class_name)($(Superclass)):
.if type = "upd"
    async = True

.endif
    def __init__($(init_param_list())) -> None:
.for field
        self.$(name) = $(name)
.endfor
.if !defined(complex)

    @classmethod
    def _parse(cls, msg: $(full_name)) -> '$(class_name)':
.for field
.  parse_field()
.endfor
        return cls($(msg_param_list()))
.endif

    def _serialize(self, msg: $(full_name)) -> None:
.for field
.  serialize_field()
.endfor
.endtemplate
